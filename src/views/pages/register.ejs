<body>
  <main class="flex h-fit min-h-screen flex-col items-center justify-center gap-12 p-6">
    <h1 class="text-center text-3xl font-bold">Create an Account</h1>
    <form action="/register" method="POST" class="flex w-full flex-col gap-8 rounded-md md:w-2/3 lg:w-1/2 xl:w-1/3">
      <!-- Full Name -->
      <div class="flex w-full flex-col">
        <label for="fullName" class="text-sm font-semibold">Full Name</label>
        <input type="text" id="fullName" name="fullName" required
          class="h-12 w-full rounded-sm border-2 border-zinc-500 px-4 py-2 outline-none duration-200 focus:border-black" />
      </div>
      <!-- Date of Birth -->
      <div class="flex w-full flex-col">
        <label for="dob" class="text-sm font-semibold">Date of Birth</label>
        <input type="date" id="dob" name="dob" required
          class="h-12 w-full rounded-sm border-2 border-zinc-500 px-4 py-2 outline-none duration-200 focus:border-black" />
      </div>
      <!-- Email -->
      <div class="flex w-full flex-col">
        <label for="email" class="text-sm font-semibold">Email</label>
        <input type="email" id="email" name="email" required
          class="h-12 w-full rounded-sm border-2 border-zinc-500 px-4 py-2 outline-none duration-200 focus:border-black" />
      </div>
      <!-- Password -->
      <div class="flex w-full flex-col">
        <label for="password" class="text-sm font-semibold">Password</label>
        <input type="password" id="password" name="password" required
          class="h-12 w-full rounded-sm border-2 border-zinc-500 px-4 py-2 outline-none duration-200 focus:border-black" />
      </div>
      <!-- Confirm Password -->
      <div class="flex w-full flex-col">
        <label for="confirmPassword" class="text-sm font-semibold">Confirm Password</label>
        <input type="password" id="confirmPassword" name="confirmPassword" required
          class="h-12 w-full rounded-sm border-2 border-zinc-500 px-4 py-2 outline-none duration-200 focus:border-black" />
      </div>

      <!-- CAPTCHA -->
      <!-- CAPTCHA -->
      <div class="flex w-full flex-col items-center">
        <div class="g-recaptcha" data-sitekey="6LfKt6wqAAAAAPSP9Pm2x33Voc3da_xOaQhFHHbC"></div>
      </div>


      <!-- Submit Button -->
      <button type="submit"
        class="flex h-12 items-center justify-center border-2 border-black bg-black font-bold uppercase tracking-tight text-white duration-200 hover:bg-white hover:text-black">
        Register
      </button>
      <p class="self-end">
        I already have an account.&nbsp;<a href="/login" class="text-zinc-500 underline">Login</a>.
      </p>
    </form>
    <div class="-mt-4 flex w-full flex-col items-center gap-6 md:w-2/3 lg:w-1/2 xl:w-1/3"></div>
  </main>
  <script src="https://www.google.com/recaptcha/api.js?render=6LfS-KsqAAAAAGqrIEG6qDj0bYhoq_9tgizRJXyR"></script>
</body>

<!-- Include Google reCAPTCHA Script -->

<script src="https://www.google.com/recaptcha/api.js" async defer></script>
<script>
  // Function to check email
  async function checkEmail(email) {
    try {
      const response = await fetch("/check-email", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ email }),
      });

      if (!response.ok) {
        throw new Error(`HTTP error! Status: ${response.status}`);
      }

      const data = await response.json();
      if (data.exists) 
        return true;
      else 
        return false;
    } catch (error) {
      //console.error("Error checking email:", error);
      return false; // Treat as invalid if there's an error
    }
  }

  // Add blur event listener to email input
  function setupEmailValidation() {
    const emailInput = document.querySelector("#email");

    emailInput.addEventListener("blur", async function () {
      const email = emailInput.value.trim();
      const existingError = document.querySelector("#email-error");

      if (checkEmail(email)) {
        if (!existingError) {
          const errorMessage = document.createElement("p");
          errorMessage.id = "email-error";
          errorMessage.textContent = "Email has been used.";
          errorMessage.classList.add("text-red-500", "text-sm", "mt-1");
          emailInput.parentElement.appendChild(errorMessage);
        }
        emailInput.classList.add("border-red-500");
      } else {
        if (existingError) {
          existingError.remove();
        }
        emailInput.classList.remove("border-red-500");
      }
    });
  }

  document.addEventListener("DOMContentLoaded", () => {
    const form = document.querySelector("form");

    // Set up email validation on blur
    setupEmailValidation();

    form.onsubmit = async function (event) {
      event.preventDefault();

      const confirmPassword = document.querySelector("#confirmPassword").value.trim();
      const pass = document.querySelector("#password").value.trim();
      const email = document.querySelector("#email").value.trim();

      // Check if passwords match
      if (pass !== confirmPassword) {
        alert("Error: Passwords do not match. Please try again.");
        return;
      }

      // Validate email during form submission
      const emailExists = await checkEmail(email);
      alert(`Email Exists: ${emailExists}`); // Log the result for debugging
      if (emailExists) {
        alert("Error: Email has been used. Please try again.");
        return;
      }

      const recaptchaResponse = grecaptcha.getResponse();
      if (!recaptchaResponse) {
        alert("Please verify the reCAPTCHA.");
        return;
      }

      // Validate reCAPTCHA server-side
      try {
        const captchaValidation = await fetch("/validate-captcha", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({ recaptchaResponse }),
        });

        if (!captchaValidation.ok) {
          throw new Error(`HTTP error! Status: ${captchaValidation.status}`);
        }

        const captchaResult = await captchaValidation.json();
        if (!captchaResult.success) {
          alert("Failed to verify reCAPTCHA. Please try again.");
        } else {
          form.submit(); // Submit the form
        }
      } catch (error) {
        console.error("Error validating reCAPTCHA:", error);
        alert("Error occurred while validating reCAPTCHA. Please try again.");
      }
    };
  });
</script>

